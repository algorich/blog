<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: matheus sales | Blog da Algorich]]></title>
  <link href="http://blog.algorich.com.br/categories/matheus-sales/atom.xml" rel="self"/>
  <link href="http://blog.algorich.com.br/"/>
  <updated>2014-09-12T16:58:57-03:00</updated>
  <id>http://blog.algorich.com.br/</id>
  <author>
    <name><![CDATA[Time Algorich]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Previnindo SPAM em formulários Rails utilizando invisible captcha]]></title>
    <link href="http://blog.algorich.com.br/2014/09/12/previnindo-spam-em-formularios-rails-utilizando-invisible-captcha/"/>
    <updated>2014-09-12T16:00:00-03:00</updated>
    <id>http://blog.algorich.com.br/2014/09/12/previnindo-spam-em-formularios-rails-utilizando-invisible-captcha</id>
    <content type="html"><![CDATA[<p class="aligncenter">
  <img class="space" title="SPAM" src="http://blog.algorich.com.br/posts-assets/images/2014/09/spam.jpg" alt="SPAM" width="500" height="360" />
</p>


<p>Qualquer aplicação web com formulários que não exigem autenticação do usuário, sofre do mesmo problema: o SPAM! Em sua maioria, preenchido por <a href="http://pt.wikipedia.org/wiki/Spambot" target="_blank">spambots</a>.</p>

<p>A técnica mais utilizada para a prevenção é o uso do <a href="http://pt.wikipedia.org/wiki/ReCAPTCHA" target="_blank">reCAPTCHA</a>, oficialmente originado do <a href="http://pt.wikipedia.org/wiki/CAPTCHA" target="_blank">CAPTCHA</a>, que foi desenvolvido pioneiramente na universidade de Carnegie-Mellon, nos EUA.</p>

<!-- more -->


<p>Um CAPTCHA usual envolve um computador (um servidor) que pede que um usuário termine um teste. Como os bots são incapazes de resolver o CAPTCHA, todo usuário que incorpora uma solução correta é presumidamente humano.</p>

<p>Já o reCAPTCHA pede para usuários digitarem palavras distorcidas exibidas na tela. Além de proteger que os robôs preencham os formulários, <a href="http://bsf.org.br/2010/02/04/recaptcha-digitalizacao-ocr-luis-von-ahn-pop-tech/" target="_blank">ele ajuda a digitalizar o texto de livros</a>.</p>

<p>O problema é que o reCAPTCHA se torna chato para os usuários, o que atrapalha e muito na <a href="http://pt.wikipedia.org/wiki/Experi%C3%AAncia_do_usu%C3%A1rio">UX</a>.</p>

<h2>Utilizando a técnica de honeypot</h2>

<p>A técnica de <a href="http://haacked.com/archive/2007/09/11/honeypot-captcha.aspx/" target="_blank">Honeypot</a> ou Invisible Captcha consiste no uso de um campo invisível no formulário. Os bots em sua maioria não carregam todo o HTML, CSS e Javascript da página. Isso faz com que eles não tenham uma visão da página como ela realmente é, não conseguindo distinguir os campos visíveis dos invisíveis.</p>

<p>Qual o resultado?</p>

<p>Eles vão preencher o nosso honeypot!</p>

<h2>Utilizando a gem Invisible Captcha</h2>

<p>A gem <a href="https://github.com/markets/invisible_captcha" target="_blank">invisible_captcha</a> é muito simples, vamos ao passo a passo:</p>

<p>Adicione ao seu Gemfile:
<code>ruby
gem 'invisible_captcha'
</code></p>

<p>Existe mais de uma forma de implementação, abordaremos aqui a implementação no Modelo.</p>

<p>Baste adicionar um atributo virtual a sua classe, como no exemplo abaixo e setá-lo como ‘invisible_captcha’:</p>

<p><code>ruby
class Topic &lt; ActiveRecord::Base
  attr_accessor :subtitle # virtual attribute, the honeypot
  validates :subtitle, invisible_captcha: true
end
</code></p>

<p>Se você estiver usando strong_parameters, não se esqueça de colocar o atributo na hash de parâmetros.</p>

<p><code>ruby
def topic_params
  params.require(:topic).permit(:subtitle)
end
</code></p>

<h2>Configuração Extra</h2>

<p>Para customizar as configurações, adicione o arquivo invisible_captcha.rb em config/initializers com o seguinte:</p>

<p><code>ruby
InvisibleCaptcha.setup do |ic|
  ic.sentence_for_humans = 'Se você é humano, por favor, ignore este campo.'
  ic.error_message = 'Você é um robô!'
  ic.fake_fields &lt;&lt; 'fake_field'
end
</code></p>

<p>Agora basta colocar o formulário na view:</p>

<p><code>ruby
&lt;%= form_for(@topic) do |f| %&gt;
  &lt;%= f.invisible_captcha :subtitle %&gt;
&lt;% end %&gt;
</code></p>

<p>Para ver o funcionamento, vá ao seu formulário com o inspetor do elemento do seu navegador e procure pelo honeypot. Veja um exemplo abaixo:</p>

<p><img src="/posts-assets/images/2014/09/code.png" alt="inspecionando elemento do honeypot" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Por que o meu site deve ser responsivo?]]></title>
    <link href="http://blog.algorich.com.br/2014/06/25/por-que-o-meu-site-deve-ser-responsivo/"/>
    <updated>2014-06-25T16:00:00-03:00</updated>
    <id>http://blog.algorich.com.br/2014/06/25/por-que-o-meu-site-deve-ser-responsivo</id>
    <content type="html"><![CDATA[<h2>Afinal, o que é esse termo tão popular nos dias de hoje?</h2>

<p>Web Design Responsivo é uma abordagem que permite que um site proveja a melhor experiência de navegação e leitura para o usuário, adequando-se à diferentes cenários, baseando-se na resolução do dispositivo que o visualiza, seja um <em>tablet</em>, <em>smartphone</em>, computador, etc...</p>

<p>Quer ver um exemplo prático? Visite o nosso site: <a href="http://algorich.com.br" target="_blank">http://algorich.com.br</a> utilizando um <em>tablet</em> e/ou <em>smartphone</em>, ou até mesmo, tente redimensionar a janela do seu navegador. Veja como os elementos são redistribuídos na tela e proporcionam fluidez e uma excelente experiência na navegação, adaptando-se a resolução.</p>

<!-- more -->


<p><img class="alignright" title="Site da Algorich responsivo" src="http://blog.algorich.com.br/posts-assets/images/2014/06/algorich_responsive.jpg" alt="Site da Algorich responsivo" width="400" height="300" /></p>

<p>Por mais que tudo isso pareça muito novo, esta abordagem começou em 2010, quando Ethan Marcotte publicou o artigo <a href="http://alistapart.com/article/responsive-web-design" target="_blank"><em>Responsive Web Design</em></a> para o site <a href="http://alistapart.com/" target="_blank"><em>A list Apart</em></a>.</p>

<p>Na prática, para os desenvolvedores, este conceito baseia-se no uso do sistema de <em>grids</em>, que usa dimensões relativas em suas unidades de medida, como porcentagens e <em>em</em>, e não mais absolutas como pixels ou pontos. O que isso significa? O conteúdo não fica mais fixo e engessado em containers pré-definidos com 960px de largura por exemplo, e ainda possuem a capacidade de reorganização, de acordo com a largura disponível. As imagens também são flexíveis e se adaptam ao contexto onde estão, previnindo que ela desrespeite e escape das dimensões do elemento HTML em que está inserida.</p>

<p>Outra técnica é o uso das <a href="http://www.w3.org/TR/css3-mediaqueries/" target="_blank">media queries</a> do CSS3, que nada mais é do que uma extensão da regra @media que foi incluída desde a versão 2.1 do CSS. Com ela pode-se definir regras e comportamentos associados ao tamanho, orientação do dispositivo (retrato ou paisagem) ou a resolução de tela.</p>

<p>Os desenvolvedores não estão sozinhos. Hoje podemos contar com frameworks front-end maduros, robustos e com boa documentação disponíveis para uso, como por exemplo o <a href="http://getbootstrap.com/" target="_blank">Bootstrap</a>, <a href="http://foundation.zurb.com/" target="_blank">Foundation</a> e <a href="http://gumbyframework.com/" target="_blank">Gumby</a></p>

<h2>Estar pronto para esse mundo é realmente importante?</h2>

<p>Alguns dados segundo pesquisa realizada pelo <a href="http://datafolha.folha.uol.com.br/mercado/2014/01/1400618-43-milhoes-de-brasileiros-acessam-internet-por-dispositivos-moveis.shtml" target="_blank">Datafolha</a>:</p>

<ul>
<li>&bull; 43 milhões de brasileiros acessam internet por dispositivos móveis;</li>
<li>&bull; 1 em cada 4 brasileiros pretende adquirir um smartphone no primeiro semestre de 2014;</li>
</ul>


<p><a href="http://olhardigital.uol.com.br/noticia/38311/38311" target="_blank">Pesquisas apontam</a> também que serviços como Facebook, Twitter e Youtube tem sido acessados cada vez mais por dispositivos móveis. O Youtube por exemplo, no final do ano passado já contabilizava 40% de seu acesso derivado de dispositivos móveis.</p>

<p>A NBC News divulgou esta imagem, ilustrada abaixo, que mostra um comparativo da Praça São Pedro, primeiramente no ano de 2005, durante a posse do Papa Bento XVI, e posteriormente em 2013, durante a posse do atual Papa Francisco. Numa diferença de 8 anos pudemos perceber a evolução da tecnologia e o crescimento absurdo do uso de dispositivos móveis.</p>

<p><img title="Comparativo da posse do papa em 2005 e 2013" src="http://blog.algorich.com.br/posts-assets/images/2014/06/posse_papa.jpg" alt="Comparativo da posse do papa em 2005 e 2013" width="670" height="389" /></p>

<p>Esses e outros fatos comprovam que o Web Design Responsivo veio pra ficar, e esse é um caminho sem volta. Vivemos num mundo cada vez mais conectado, hoje carregamos smartphones com grandes poderes de processamento em nosso bolso bastando alguns toques para termos facilmente um mundo de informações disponíveis em tempo real cabendo na palma de nossa mão.</p>

<p>Aqui na <a href="http://algorich.com.br/" target="_blank">Algorich</a> nossos trabalhos incluem as técnicas de web design responsivo. Quer saber mais? <a href="http://algorich.com.br/contato" target="_blank">Entre em contato</a> agora mesmo!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conheça os test helpers: #travel_to e #travel_back no Rails 4.1]]></title>
    <link href="http://blog.algorich.com.br/2014/05/23/conheca-os-test-helpers-travel_to-e-travel_back-no-rails-4-1/"/>
    <updated>2014-05-23T17:00:00-03:00</updated>
    <id>http://blog.algorich.com.br/2014/05/23/conheca-os-test-helpers-travel_to-e-travel_back-no-rails-4-1</id>
    <content type="html"><![CDATA[<p>Quem trabalha com testes no Ruby on Rails certamente já teve de recorrer a gem <a href="https://github.com/travisjeffery/timecop" target="_blank">timecop</a> para cobrir os testes com dependências de tempo.</p>

<p>Como exemplo, posso citar a regra de negócio de um seguinte cenário:</p>

<p>O pagamento de um aluguel deve ser realizado em uma data específica de cada mês, exceto quando esse data cai em um fim de semana. Nesse caso, o pagamento será realizado na próxima segunda-feira.</p>

<!-- more -->


<p><img class="alignright" title="ilustração: de volta para o futuro" src="http://blog.algorich.com.br/posts-assets/images/2014/05/back-future.jpg" alt="ilustração: de volta para o futuro" width="250" height="250" /></p>

<p><strong>Onde a gem timecop atua?</strong></p>

<p>Timecop é uma gem que provê à nossa aplicação a capacidade de viajar ou parar no tempo, isso permite que consigamos realizar testes com dependência de tempo de forma muito simples, e certamente assegurar os testes para a nossa regra de negócio detalhada acima.</p>

<h2>Os test helpers #travel_to e #travel_back</h2>

<p>Com a <a href="http://guides.rubyonrails.org/4_1_release_notes.html" target="_blank">nova release do Rails 4.1</a>, agora temos os métodos: <em>#travel_to</em> e <em>#travel_back</em>.</p>

<p>Com o <em>#travel_to</em> podemos facilmente alterar o dia e horário fornecendo um valor ou duração de tempo. Já o <em>#travel_back</em> faz com que retornemos ao estágio atual, desfazendo as alterações do <em>#travel_to</em>.</p>

<p>Essa feature teve um destaque muito pequeno (o que não diminui sua importância, na minha opinião), sendo mencionada apenas no final das notas da release:</p>

<p><img title="release notes: travel_to / travel_back" src="http://blog.algorich.com.br/posts-assets/images/2014/05/travel-to.png" alt="release notes: travel_to / travel_back" width="670" height="389" /></p>

<p>Referência: <a href="http://brandonhilkert.com/blog/rails-4-1-travel-to-test-helper/" target="_blank">http://brandonhilkert.com/blog/rails-4-1-travel-to-test-helper/</a></p>
]]></content>
  </entry>
  
</feed>
